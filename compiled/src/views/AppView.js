// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.className = 'container';

    AppView.prototype.template = _.template('<div class="money">Cash: <%- money %></div> <div class="currentBet">At Stake: <%- currentBet %></div> <form action="#" class="bet"> <input type="text" name="betAmount" placeholder="Set your bet here" value=0 class="betAmount"></input> <input type="submit" class="Bet" value="BET"></input> </form>');

    AppView.prototype.initialize = function() {
      this.model.on('change:game', this.render, this);
      this.backgroundView = new BackgroundView({
        model: this.model
      }).el;
      return this.render();
    };

    AppView.prototype.handleSubmit = function(event) {
      event.preventDefault();
      this.model.bet((this.$el.find('.betAmount')).val());
      return this.render();
    };

    AppView.prototype.events = {
      "submit": "handleSubmit"
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.append(this.template(this.model.attributes));
      this.$el.append(new GameView({
        model: this.model.get('game')
      }).el);
      return this.$el.append(new HandHistoryView({
        collection: this.model.get('history')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
