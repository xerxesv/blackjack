// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Game = (function(superClass) {
    extend(Game, superClass);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      return (this.get('playerHand')).on('done', this.dealerTurn, this);
    };

    Game.prototype.dealerTurn = function() {
      (this.get('dealerHand')).first().flip();
      if ((this.get('playerHand')).scores() > 21) {
        return this.playerLose();
      }
      while ((this.get('dealerHand')).scores() < 17) {
        (this.get('dealerHand')).hit();
      }
      if ((this.get('dealerHand')).scores() > 21) {
        return this.playerWin();
      }
      return this.countScores();
    };

    Game.prototype.hands = function() {
      return {
        playerHand: this.get('playerHand'),
        dealerHand: this.get('dealerHand')
      };
    };

    Game.prototype.countScores = function() {
      if ((this.get('playerHand')).scores() > (this.get('dealerHand')).scores()) {
        return this.playerWin();
      } else {
        return this.playerLose();
      }
    };

    Game.prototype.playerWin = function() {
      alert('You win!');
      return this.trigger('playerWin', this);
    };

    Game.prototype.playerLose = function() {
      alert('You lose :(');
      return this.trigger('playerLose', this);
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.js.map
